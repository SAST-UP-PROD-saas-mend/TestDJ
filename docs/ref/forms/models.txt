====================
Model Form Functions
====================

Model Form API reference. For introductory material about model forms, see the
:doc:`/topics/forms/modelforms` topic guide.

.. module:: django.forms.models
   :synopsis: Django's functions for building model forms and formsets.

Creating Model Forms
====================

``modelform_factory``
---------------------

.. function:: modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfield_callback=None, widgets=None, localized_fields=None, labels=None, help_texts=None, error_messages=None, field_classes=None)

    Returns a :class:`~django.forms.ModelForm` class for the given ``model``.
    You can optionally pass a ``form`` argument to use as a starting point for
    constructing the ``ModelForm``.

    ``fields`` is an optional list of field names. If provided, only the named
    fields will be included in the returned fields.

    ``exclude`` is an optional list of field names. If provided, the named
    fields will be excluded from the returned fields, even if they are listed
    in the ``fields`` argument.

    ``formfield_callback`` is a callable that takes a model field and returns
    a form field.

    ``widgets`` is a dictionary of model field names mapped to a widget.

    ``localized_fields`` is a list of names of fields which should be localized.

    ``labels`` is a dictionary of model field names mapped to a label.

    ``help_texts`` is a dictionary of model field names mapped to a help text.

    ``error_messages`` is a dictionary of model field names mapped to a
    dictionary of error messages.

    ``field_classes`` is a dictionary of model field names mapped to a form
    field class.

    See :ref:`modelforms-factory` for example usage.

    You must provide the list of fields explicitly, either via keyword arguments
    ``fields`` or ``exclude``, or the corresponding attributes on the form's
    inner ``Meta`` class. See :ref:`modelforms-selecting-fields` for more
    information. Omitting any definition of the fields to use will result in
    an :exc:`~django.core.exceptions.ImproperlyConfigured` exception.

Creating Model Formsets
=======================

There are two ways to create model formsets in Django:

``modelformset_factory``
------------------------

.. function:: modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, edit_only=False)

    Returns a ``FormSet`` class for the given ``model`` class.

    Arguments ``model``, ``form``, ``fields``, ``exclude``,
    ``formfield_callback``, ``widgets``, ``localized_fields``, ``labels``,
    ``help_texts``, ``error_messages``, and ``field_classes`` are all passed
    through to :func:`~django.forms.models.modelform_factory`.

    Arguments ``formset``, ``extra``, ``can_delete``, ``can_order``,
    ``max_num``, ``validate_max``, ``min_num``, ``validate_min``,
    ``absolute_max``, ``can_delete_extra``, and ``renderer`` are passed
    through to :func:`~django.forms.formsets.formset_factory`. See
    :doc:`formsets </topics/forms/formsets>` for details.

    The ``edit_only`` argument allows :ref:`preventing new objects creation
    <model-formsets-edit-only>`.

    See :ref:`model-formsets` for example usage.

Declarative ``ModelFormSet``
----------------------------

.. class:: ModelFormSet

    A BaseModelFormSet subclass that allows declarative declaration of model formsets.

    .. versionadded:: 5.1

    Returns a ``ModelFormSet`` class for the given ``model`` class.

    The same arguments that can be passed to the ``modelformset_factory`` function 
    can also be passed to the declarative syntax.
    
    See the following example which shows how to create AuthorFormSet from
    ``Author`` model::

    .. code-block:: pycon

        >>> from django.forms import models
        >>> from myapp.models import Author

        >>> class AuthorFormSet(models.ModelFormSet):
        ...     model = Author
        ...     fields = ["field1", "field2"]
        ...     exclude = ["field3"]
        ...     extra = 2
        ...     can_order = True
        ...     can_delete = True
        ...     max_num = 10
        ...     validate_max = True
        ...     min_num = 3
        ...     validate_min = True
        ...     absolute_max = 15
        ...     can_delete_extra = False
        ...     widgets = {"field1": TextInput(), "field2": Textarea()}
        ...

    The same arguments that can be passed to the ``modelformset_factory`` function 
    can also be passed to the declarative syntax.

    You can also create your model formset without explicitly specifying the model 
    and fields, as they can be inferred from the form class. As shown in the 
    example below:

    .. code-block:: pycon

        >>> from django.forms import models
        >>> from myapp.forms import PostForm

        >>> class PostFormSet(models.ModelFormSet):
        ...     form = PostForm  # Specify the form class
        ...     extra = 2
        ...

Creating Inline Formsets
========================

There are two ways to create inline formsets in Django:

``inlineformset_factory``
-------------------------

.. function:: inlineformset_factory(parent_model, model, form=ModelForm, formset=BaseInlineFormSet, fk_name=None, fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, edit_only=False)

    Returns an ``InlineFormSet`` using :func:`modelformset_factory` with
    defaults of ``formset=``:class:`~django.forms.models.BaseInlineFormSet`,
    ``can_delete=True``, and ``extra=3``.

    If your model has more than one :class:`~django.db.models.ForeignKey` to
    the ``parent_model``, you must specify a ``fk_name``.

    See :ref:`inline-formsets` for example usage.

Declarative ``InlineFormSet``
-----------------------------

.. class:: InlineFormSet

    A BaseInlineFormSet subclass that allows declarative declaration of model formsets.

    .. versionadded:: 5.1

    Returns a ``InlineFormSet`` class for the given ``parent_model`` and ``model`` class.

    The Declarative ``InlineFormSet`` class takes the same arguments as the 
    :func:`inlineformset_factory` function.

    .. code-block:: pycon

        >>> from django.forms import models
        >>> from myapp.models import Author, Book

        >>> class BookFormSet(models.InlineFormSet):
        ...     parent_model = Author
        ...     model = Book
        ...     extra = 1
        ...     fields = "__all__"
        ...
